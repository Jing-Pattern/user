// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"github.com/Jing-Pattern/user/rpc/internal/logic"
	"github.com/Jing-Pattern/user/rpc/internal/svc"
	"github.com/Jing-Pattern/user/rpc/pb"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) GetUserInfo(ctx context.Context, in *pb.UserReq) (*pb.UserInfo, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserServiceServer) CreateUser(ctx context.Context, in *pb.CreateUserReq) (*pb.UserResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServiceServer) UpdateUser(ctx context.Context, in *pb.UserInfo) (*pb.UserResp, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServiceServer) DeleteUser(ctx context.Context, in *pb.UserReq) (*pb.UserResp, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServiceServer) FindUser(ctx context.Context, in *pb.UserReq) (*pb.ExistUser, error) {
	l := logic.NewFindUserLogic(ctx, s.svcCtx)
	return l.FindUser(in)
}

func (s *UserServiceServer) FindUserByName(ctx context.Context, in *pb.UserByNameReq) (*pb.UserInfo, error) {
	l := logic.NewFindUserByNameLogic(ctx, s.svcCtx)
	return l.FindUserByName(in)
}
