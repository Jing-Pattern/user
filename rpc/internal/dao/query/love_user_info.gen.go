// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Jing-Pattern/user/rpc/internal/dao/model"
)

func newLoveUserInfo(db *gorm.DB, opts ...gen.DOOption) LoveUserInfo {
	_loveUserInfo := LoveUserInfo{}

	_loveUserInfo.loveUserInfoDo.UseDB(db, opts...)
	_loveUserInfo.loveUserInfoDo.UseModel(&model.LoveUserInfo{})

	tableName := _loveUserInfo.loveUserInfoDo.TableName()
	_loveUserInfo.ALL = field.NewAsterisk(tableName)
	_loveUserInfo.ID = field.NewInt32(tableName, "id")
	_loveUserInfo.OpenID = field.NewString(tableName, "open_id")
	_loveUserInfo.SessionKey = field.NewString(tableName, "session_key")
	_loveUserInfo.UnionID = field.NewString(tableName, "union_id")
	_loveUserInfo.Nickname = field.NewString(tableName, "nickname")
	_loveUserInfo.Name = field.NewString(tableName, "name")
	_loveUserInfo.Gender = field.NewInt32(tableName, "gender")
	_loveUserInfo.Tel = field.NewInt32(tableName, "tel")
	_loveUserInfo.AvatarURL = field.NewString(tableName, "avatar_url")
	_loveUserInfo.IsSingle = field.NewInt32(tableName, "is_single")
	_loveUserInfo.IsDel = field.NewInt32(tableName, "is_del")

	_loveUserInfo.fillFieldMap()

	return _loveUserInfo
}

type LoveUserInfo struct {
	loveUserInfoDo loveUserInfoDo

	ALL        field.Asterisk
	ID         field.Int32  // id
	OpenID     field.String // openId
	SessionKey field.String // 会话密钥
	UnionID    field.String // 微信开放平台唯一标识（可选，如果需要跨应用统一用户）
	Nickname   field.String // 昵称
	Name       field.String // 名称
	Gender     field.Int32  // 用户性别（0表示未知，1表示男性，2表示女性）
	Tel        field.Int32  // 绑定手机号
	AvatarURL  field.String // 用户头像url
	IsSingle   field.Int32  // 是否单身
	IsDel      field.Int32  // 注销 0为未注销，1已注销

	fieldMap map[string]field.Expr
}

func (l LoveUserInfo) Table(newTableName string) *LoveUserInfo {
	l.loveUserInfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l LoveUserInfo) As(alias string) *LoveUserInfo {
	l.loveUserInfoDo.DO = *(l.loveUserInfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *LoveUserInfo) updateTableName(table string) *LoveUserInfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.OpenID = field.NewString(table, "open_id")
	l.SessionKey = field.NewString(table, "session_key")
	l.UnionID = field.NewString(table, "union_id")
	l.Nickname = field.NewString(table, "nickname")
	l.Name = field.NewString(table, "name")
	l.Gender = field.NewInt32(table, "gender")
	l.Tel = field.NewInt32(table, "tel")
	l.AvatarURL = field.NewString(table, "avatar_url")
	l.IsSingle = field.NewInt32(table, "is_single")
	l.IsDel = field.NewInt32(table, "is_del")

	l.fillFieldMap()

	return l
}

func (l *LoveUserInfo) WithContext(ctx context.Context) *loveUserInfoDo {
	return l.loveUserInfoDo.WithContext(ctx)
}

func (l LoveUserInfo) TableName() string { return l.loveUserInfoDo.TableName() }

func (l LoveUserInfo) Alias() string { return l.loveUserInfoDo.Alias() }

func (l LoveUserInfo) Columns(cols ...field.Expr) gen.Columns {
	return l.loveUserInfoDo.Columns(cols...)
}

func (l *LoveUserInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *LoveUserInfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["id"] = l.ID
	l.fieldMap["open_id"] = l.OpenID
	l.fieldMap["session_key"] = l.SessionKey
	l.fieldMap["union_id"] = l.UnionID
	l.fieldMap["nickname"] = l.Nickname
	l.fieldMap["name"] = l.Name
	l.fieldMap["gender"] = l.Gender
	l.fieldMap["tel"] = l.Tel
	l.fieldMap["avatar_url"] = l.AvatarURL
	l.fieldMap["is_single"] = l.IsSingle
	l.fieldMap["is_del"] = l.IsDel
}

func (l LoveUserInfo) clone(db *gorm.DB) LoveUserInfo {
	l.loveUserInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l LoveUserInfo) replaceDB(db *gorm.DB) LoveUserInfo {
	l.loveUserInfoDo.ReplaceDB(db)
	return l
}

type loveUserInfoDo struct{ gen.DO }

func (l loveUserInfoDo) Debug() *loveUserInfoDo {
	return l.withDO(l.DO.Debug())
}

func (l loveUserInfoDo) WithContext(ctx context.Context) *loveUserInfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loveUserInfoDo) ReadDB() *loveUserInfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l loveUserInfoDo) WriteDB() *loveUserInfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l loveUserInfoDo) Session(config *gorm.Session) *loveUserInfoDo {
	return l.withDO(l.DO.Session(config))
}

func (l loveUserInfoDo) Clauses(conds ...clause.Expression) *loveUserInfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loveUserInfoDo) Returning(value interface{}, columns ...string) *loveUserInfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loveUserInfoDo) Not(conds ...gen.Condition) *loveUserInfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loveUserInfoDo) Or(conds ...gen.Condition) *loveUserInfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loveUserInfoDo) Select(conds ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loveUserInfoDo) Where(conds ...gen.Condition) *loveUserInfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loveUserInfoDo) Order(conds ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loveUserInfoDo) Distinct(cols ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loveUserInfoDo) Omit(cols ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loveUserInfoDo) Join(table schema.Tabler, on ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loveUserInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loveUserInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loveUserInfoDo) Group(cols ...field.Expr) *loveUserInfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loveUserInfoDo) Having(conds ...gen.Condition) *loveUserInfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loveUserInfoDo) Limit(limit int) *loveUserInfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loveUserInfoDo) Offset(offset int) *loveUserInfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loveUserInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *loveUserInfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loveUserInfoDo) Unscoped() *loveUserInfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loveUserInfoDo) Create(values ...*model.LoveUserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loveUserInfoDo) CreateInBatches(values []*model.LoveUserInfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loveUserInfoDo) Save(values ...*model.LoveUserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loveUserInfoDo) First() (*model.LoveUserInfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoveUserInfo), nil
	}
}

func (l loveUserInfoDo) Take() (*model.LoveUserInfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoveUserInfo), nil
	}
}

func (l loveUserInfoDo) Last() (*model.LoveUserInfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoveUserInfo), nil
	}
}

func (l loveUserInfoDo) Find() ([]*model.LoveUserInfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoveUserInfo), err
}

func (l loveUserInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoveUserInfo, err error) {
	buf := make([]*model.LoveUserInfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loveUserInfoDo) FindInBatches(result *[]*model.LoveUserInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loveUserInfoDo) Attrs(attrs ...field.AssignExpr) *loveUserInfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loveUserInfoDo) Assign(attrs ...field.AssignExpr) *loveUserInfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loveUserInfoDo) Joins(fields ...field.RelationField) *loveUserInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loveUserInfoDo) Preload(fields ...field.RelationField) *loveUserInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loveUserInfoDo) FirstOrInit() (*model.LoveUserInfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoveUserInfo), nil
	}
}

func (l loveUserInfoDo) FirstOrCreate() (*model.LoveUserInfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoveUserInfo), nil
	}
}

func (l loveUserInfoDo) FindByPage(offset int, limit int) (result []*model.LoveUserInfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loveUserInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loveUserInfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loveUserInfoDo) Delete(models ...*model.LoveUserInfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loveUserInfoDo) withDO(do gen.Dao) *loveUserInfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
